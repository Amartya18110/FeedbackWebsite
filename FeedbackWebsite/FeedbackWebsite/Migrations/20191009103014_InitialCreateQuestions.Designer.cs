// <auto-generated />
using System;
using FeedbackWebsite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FeedbackWebsite.Migrations
{
    [DbContext(typeof(FeedbackWebsiteContext))]
    [Migration("20191009103014_InitialCreateQuestions")]
    partial class InitialCreateQuestions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FeedbackWebsite.Models.AnswersInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("EventId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.ToTable("AnswersInfoModel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AnswersInfoModel");
                });

            modelBuilder.Entity("FeedbackWebsite.Models.EventInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EventEndDate");

                    b.Property<string>("EventLocation");

                    b.Property<string>("EventName")
                        .IsRequired();

                    b.Property<string>("EventOrg");

                    b.Property<DateTime>("EventStartDate");

                    b.Property<string>("PresentersName");

                    b.HasKey("Id");

                    b.ToTable("EventInfoModel");
                });

            modelBuilder.Entity("FeedbackWebsite.Models.QuestionTextModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnum");

                    b.Property<string>("QuestionText");

                    b.HasKey("Id");

                    b.ToTable("QuestionTextModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnum = true,
                            QuestionText = "1. The presenter(s) possessed appropriate competences, knowledge and expertise in the field demonstrated on the event."
                        },
                        new
                        {
                            Id = 2,
                            IsEnum = true,
                            QuestionText = "2. The presenter(s) guided the event effectively, taking interactive approach in keeping the audience attention focused."
                        },
                        new
                        {
                            Id = 3,
                            IsEnum = true,
                            QuestionText = "3. The event framework was easy to follow with duration optimized to cover the planned themes and discussions."
                        },
                        new
                        {
                            Id = 4,
                            IsEnum = true,
                            QuestionText = "4. The event was conducted in affirmative manner and pleasant atmosphere."
                        },
                        new
                        {
                            Id = 5,
                            IsEnum = true,
                            QuestionText = "5. The organizers offered consultancy and assistance outside planned timeframe and after the event ending."
                        },
                        new
                        {
                            Id = 6,
                            IsEnum = true,
                            QuestionText = "6. The materials and content were beneficial, offering new and knowledgeable information appropriate to my skills and experience level."
                        },
                        new
                        {
                            Id = 7,
                            IsEnum = true,
                            QuestionText = "7. I could successfully implement the event information and knowledge in my daily job activities."
                        },
                        new
                        {
                            Id = 8,
                            IsEnum = true,
                            QuestionText = "8. The event met my expectations and I found the overall program valuable and useful."
                        },
                        new
                        {
                            Id = 9,
                            IsEnum = true,
                            QuestionText = "9. I would recommend this event to my colleagues."
                        },
                        new
                        {
                            Id = 10,
                            IsEnum = false,
                            QuestionText = "Comments: Please give a brief comment on the things you liked on this event, and suggest ideas for improvement of the future events of this kind."
                        });
                });

            modelBuilder.Entity("FeedbackWebsite.Models.UserEventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserEventModels");
                });

            modelBuilder.Entity("FeedbackWebsite.Models.AnswerEnum", b =>
                {
                    b.HasBaseType("FeedbackWebsite.Models.AnswersInfoModel");

                    b.Property<int>("QuestionEnumAnswer");

                    b.HasDiscriminator().HasValue("AnswerEnum");
                });

            modelBuilder.Entity("FeedbackWebsite.Models.AnswerText", b =>
                {
                    b.HasBaseType("FeedbackWebsite.Models.AnswersInfoModel");

                    b.Property<string>("AnswerTextAnswer");

                    b.HasDiscriminator().HasValue("AnswerText");
                });
#pragma warning restore 612, 618
        }
    }
}
